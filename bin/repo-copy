#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var os = require('os');
var fs = require('fs');
var pkg = require('../package.json');
var rimraf = require('rimraf');
var module = require('../src/repo-copy');
var debug = require('debug')('repo-copy:bin');

program
  .version(pkg.version)
  .usage('[options] <repo path ...>')
  .option('-c, --copy', 'Copy repository')
  .option('-k, --compress', 'Compress repository')
  .option('-t, --gzip', 'Use tar and gzip to create the compressed file')
  .option('-z, --zip', 'Use zip to create the compressed file')
  .option('-o, --out [stat]', 'Output (repo.tar.gz or copyFolder/)', path.resolve(process.cwd(), 'repository.tar.gz'))
  .parse(process.argv);

debugger;

var canStart = module.validateProgram(program);
if (canStart === false){
  program.outputHelp();
  return;
}else if (canStart instanceof Error) {
  console.log(canStart.message);
  return;
}

var repoPath = path.join(process.cwd(), program.args[0], '.git');
debug('Repo path: %s', repoPath);

module.isGitRepo(repoPath).then((isIt) => {
  debug('Is a repo?: %s', isIt);
  return module.getFiles(repoPath);
}).then((files) => {
  debug('Path files: %o', files);
  if (program.copy && program.out !== path.resolve(process.cwd(), 'repository.zip')){
    return module.createCopy(path.resolve(repoPath, '..'), files, program.out);
  }else{
    var destPath = path.resolve(os.tmpdir(), path.basename(path.resolve(repoPath, '..')));
    try {
      rimraf.sync(destPath);
    }catch(ex){
    }

    return module.createCopy(path.resolve(repoPath, '..'), files, destPath);
  }
}).then((tempFolder) => {
  debug('Temporal folder: %s', tempFolder);

  if (program.compress && !program.zip){
    return module.createTarGzip(tempFolder, program.out);
  }else if (program.compress && program.zip){
    module.createZip(tempFolder, program.out);
  }
  return tempFolder;

}).then((tempFolder) => {
  try {
    rimraf.sync(tempFolder);
  }catch(ex){

  }
  console.log('The repository was copy at: ' + program.out);
}).catch((err) => {
  if (err.code === 'ENOENT' && err.path.indexOf('.git') !== -1){
    console.log('This path is not a git repository (' + err.path.replace('/.git', '') + ')');
  }else{
    console.log(err);
  }
});
